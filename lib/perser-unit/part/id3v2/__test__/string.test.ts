import { test, expect } from "vitest";

import { readId3v2String } from "../string";

test("read as latin1 string", () => {
  const buffer = new Uint8Array([0x6c, 0x61, 0x74, 0x69, 0x6e, 0x31, 0x20, 0x73, 0x74, 0x72]);
  const result = readId3v2String(0)(buffer, 0, 10);

  expect(result).toBe("latin1 str");
});

test("read as utf-16be string", () => {
  const buffer = new Uint8Array([
    0x00, 0x75, 0x00, 0x74, 0x00, 0x66, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x00, 0x62, 0x00, 0x65, 0x00, 0x20, 0x00,
    0x73, 0x00, 0x74, 0x00, 0x72, 0x2b, 0x50,
  ]);
  const result = readId3v2String(1)(buffer, 0, 26);

  expect(result).toBe("utf-16be str⭐");
});

test("read as utf-16 bom with 0xfffe (little endian) string", () => {
  const buffer = new Uint8Array([
    0xff, 0xfe, 0x75, 0x00, 0x74, 0x00, 0x66, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x00, 0x20, 0x00, 0x62, 0x00, 0x6f,
    0x00, 0x6d, 0x00, 0x20, 0x00, 0x73, 0x00, 0x74, 0x00, 0x72, 0x00, 0x50, 0x2b,
  ]);
  const result = readId3v2String(2)(buffer, 0, 32);

  expect(result).toBe("utf-16 bom str⭐");
});

test("read as utf-16 bom with 0xfeff (big endian) string", () => {
  const buffer = new Uint8Array([
    0xfe, 0xff, 0x00, 0x75, 0x00, 0x74, 0x00, 0x66, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x36, 0x00, 0x20, 0x00, 0x62, 0x00,
    0x6f, 0x00, 0x6d, 0x00, 0x20, 0x00, 0x73, 0x00, 0x74, 0x00, 0x72, 0x2b, 0x50,
  ]);
  const result = readId3v2String(2)(buffer, 0, 32);

  expect(result).toBe("utf-16 bom str⭐");
});

test("read as utf-8 string", () => {
  const buffer = new Uint8Array([0x75, 0x74, 0x66, 0x2d, 0x38, 0x20, 0x73, 0x74, 0x72, 0xe2, 0xad, 0x90]);
  const result = readId3v2String(3)(buffer, 0, 12);

  expect(result).toBe("utf-8 str⭐");
});

test("read unknown string as latin1 string", () => {
  const buffer = new Uint8Array([0x6c, 0x61, 0x74, 0x69, 0x6e, 0x31, 0x20, 0x73, 0x74, 0x72]);
  const result = readId3v2String(4)(buffer, 0, 10);

  expect(result).toBe("latin1 str");
});
